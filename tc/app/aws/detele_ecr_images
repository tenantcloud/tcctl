#!/bin/bash

# shellcheck disable=SC1091,SC2034

source "$CLI_DIR/tc/framework/functions"
source "$CLI_DIR/tc/app/aws/functions"

set +e

PROFILE="default"
LEAVE_LAST_IMAGE="5"

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
  --profile)
  PROFILE="$2"
  shift 2
  ;;
  --repository)
  REPOSITORY="$2"
  shift 2
  ;;
  --leave-last-image)
  LEAVE_LAST_IMAGE="$2"
  shift 2
  ;;
  --exclude-tag)
  EXCLUDE_TAG="$2"
  shift 2
  ;;
  *)
  ;;
esac
done

# Delete last N images from json
_parsed_json=$(_delete_last_n_images_from_json "$(_describe_ecr_images "$REPOSITORY" "$PROFILE")" "$LEAVE_LAST_IMAGE")

# Get list excluded tags
list="${EXCLUDE_TAG//,/ }"

if [ -z "$REPOSITORY" ]; then
  __MSG="Command: tcctl aws get_ecr_images_list missed --repository arg"
  _message "$__MSG" "error"
else
  if [ -z "$EXCLUDE_TAG" ]; then
    _get_old_image_tags "$_parsed_json"
    # Create array with images digest
    _array=$( _get_old_image_digest "$_parsed_json" )
    # Delete AWS ECR images from array
    for l in "${_array[@]}"
    do
      for i in $l
      do
        _delete_old_ecr_images "$REPOSITORY" "$PROFILE"
      done
    done
  else
    # Delete last N images from json
    for item in $list; do
      _parsed_json=$(echo "$_parsed_json" | jq "del ( .[] | select ( .imageTags[] == \"$item\" ))")
    done
    # Print deleted images tags without excluded tag
    _get_old_image_tags "$_parsed_json"
    # Get excluded image digest
    _array=$( _get_old_image_digest "$_parsed_json" )
    # Delete AWS ECR images from array
    for l in "${_array[@]}"
    do
      for i in $l
      do
        _delete_old_ecr_images "$REPOSITORY" "$PROFILE"
      done
    done
  fi
fi
