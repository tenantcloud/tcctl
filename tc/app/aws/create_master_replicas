#!/usr/bin/env bash

source "./cli/tc/framework/functions"

function create_master_replicas() {
  DB_IDENTIFIER=$1
  DB_INSTANCE_TYPE=$2
  for (( i = 1; i <= $REPLICA_DB_INSTANCES_COUNT; i++ )); do
    if [[ $i = "1" ]]; then
      DB_REPLICA_NAME=${DB_IDENTIFIER}-replica-$(date +%Y%m%d-%H%M%S)
      __output_1=$( aws rds create-db-instance-read-replica \
              --db-instance-identifier $DB_REPLICA_NAME \
              --source-db-instance-identifier $DB_IDENTIFIER \
              --db-instance-class $DB_INSTANCE_TYPE )
      export _error_code=$?
      __MSG="Command: \033[36mtcctl aws create read replica $DB_REPLICA_NAME\033[39m\n"
      __MSG+="$__output_1"
      if [ $_error_code -eq "0" ]; then
        message_info "$__MSG"
      else
        message_error "$__MSG"
      fi
    fi
    if [[ $i = "2" ]]; then
      DB_BACKUP_NAME=${DB_IDENTIFIER}-backup-$(date +%Y%m%d-%H%M%S)
      __output_2=$(aws rds create-db-instance-read-replica \
              --db-instance-identifier $DB_BACKUP_NAME \
              --source-db-instance-identifier $DB_IDENTIFIER \
              --db-instance-class $DB_INSTANCE_TYPE )
      export _error_code=$?
      __MSG="Command: \033[36mtcctl aws create backup read replica: $DB_BACKUP_NAME\033[39m\n"
      __MSG+="$__output_2"
      if [ $_error_code -eq "0" ]; then
        message_info "$__MSG"
        DB_URL_SUFFIX=$(cat .env | grep "^DB_HOST=" | awk -F'.' '{ print $2"."$3"."$4"."$5"."$6 }')
        slack chat send "New DB slave: ${DB_BACKUP_NAME}.${DB_URL_SUFFIX}" "#replica-db-access" > /dev/null
      else
        message_error "$__MSG"
      fi
    fi
  done
}

create_master_replicas $1 $2
