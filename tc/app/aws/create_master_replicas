#!/usr/bin/env bash

# shellcheck disable=SC2004,SC1090

source "$CLI_DIR/tc/framework/functions"
source "$CLI_DIR/tc/app/aws/functions"
source "$CLI_DIR/tc/app/slack/functions"

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    --db-master-name)
    DB_MASTER_NAME="$2"
    shift 2
    ;;
    --db-instance-type)
    DB_INSTANCE_TYPE="$2"
    shift 2
    ;;
    --replicas-count)
    REPLICA_DB_INSTANCES_COUNT="$2"
    shift 2
    ;;
    *)
    ;;
esac
done

function create_master_replicas() {
  __db_master_name=$1
  __db_instance_type=$2
  __replica_db_instances_count=$3
  for (( m = 1; m <= $__replica_db_instances_count; m++ )); do
    if [[ $m = "1" ]]; then
      __db_replica_name=${__db_master_name}-replica-$(date +%Y%m%d-%H%M%S)
      __output=$( aws rds create-db-instance-read-replica \
              --db-instance-identifier "$__db_replica_name" \
              --source-db-instance-identifier "$__db_master_name" \
              --db-instance-class "$__db_instance_type" )
      _error_code=$?
      __MSG="Command: tcctl aws create read replica $__db_replica_name"
      __MSG+="$__output"
      if [ $_error_code -eq "0" ]; then
        echo $_error_code
        _message "$__MSG"
      else
        __MSG="Error, when create replica"
        _message "$__MSG" "error" "$_error_code"
      fi
    fi
    if [[ $m = "2" ]]; then
      __db_backup_name=${__db_master_name}-backup-$(date +%Y%m%d-%H%M%S)
      __output=$( aws rds create-db-instance-read-replica \
              --db-instance-identifier "$__db_backup_name" \
              --source-db-instance-identifier "$__db_master_name" \
              --db-instance-class "$__db_instance_type" )
      _error_code=$?
      __MSG="Command: tcctl aws create backup read replica: $__db_backup_name"
      __MSG+="$__output"
      if [ "$_error_code" -eq "0" ]; then
        _message "$__MSG"
        __db_url_suffix=$(grep "^DB_HOST=" .env | awk -F'.' '{ print $2"."$3"."$4"."$5"."$6 }')
        slack_send_message "New DB slave: ${__db_backup_name}.${__db_url_suffix}" "#replica-db-access" "#18db12"
      else
        _message "$__MSG" "error" "$_error_code"
      fi
    fi
  done
}

if [ -z "$DB_MASTER_NAME" ]; then
  __MSG="Command: tcctl aws create_master_replicas missed --db-master-name"
  _message "$__MSG" "error" "$_error_code"
elif [ -z "$DB_INSTANCE_TYPE" ]; then
  __MSG="Command: tcctl aws create_master_replicas missed --db-instance-type"
  _message "$__MSG" "error" "$_error_code"
elif [ -z "$REPLICA_DB_INSTANCES_COUNT" ]; then
  __MSG="Command: tcctl aws create_master_replicas missed --replicas-count"
  _message "$__MSG" "error" "$_error_code"
else
  create_master_replicas "$DB_MASTER_NAME" "$DB_INSTANCE_TYPE" "$REPLICA_DB_INSTANCES_COUNT"
fi
