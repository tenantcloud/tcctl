#!/usr/bin/env bash

__draw_line() {
  __count=$2
  __symbol_count=${__count:=80}
  for (( __i_count=1; __i_count <= __symbol_count; __i_count++ )) ; do printf "%s" "$1"; done
  echo
}

__show_date_hostname() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] on $(hostname)"
}

# Function show message (info, error, warning)
# Usage: _message "message" "error" "128"
#        _message "message"
function _message {
  __message_body="$1"
  __message_type="${2:-info}"
  __message_error_code="${3:-0}"

  case "$__message_type" in
    error)
      echo "= ERROR ========================================================================"
    ;;
    warning)
      echo "= WARNING ======================================================================"
    ;;
    *)
      echo "= INFO ========================================================================="
    ;;
  esac

  __show_date_hostname
  __draw_line -

  [[ $__message_type != "info" ]] && echo "Exit code $__message_error_code"
  printf "%b\n" "$__message_body"

  __draw_line -

  if [[ $__message_type == "error" ]]; then
    exit "$__message_error_code"
  fi
}

function _get_project_path() {
  pwd
}

function _get_project_name() {
  __path="${PWD##*/}"
  echo "${__path//./-}"
}

function _get_os() {
  uname -s
}

function _get_date() {
  date +%s
}

function _check_net() {
  if ping -c 2 8.8.8.8 > /dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}

function _set_dir_permission() {
  __OS=$(_get_os)
  __dir_path=$1
  __permission=$2
  if [[ $__OS == "Linux" ]]; then
    __command="sudo "
  else
    __command=
  fi
  __command+="chmod -R $__permission $__dir_path"
  eval "$__command"
}

set_value_in_variable () {
while echo "$1" | grep -q ^--; do
  __key=${1//--/}
  __key=${__key//-/_}
  if [[ -n "$2" ]]; then
    eval "${__key}"='$2'
    shift 2
  else
    eval "${__key}="
    shift
  fi
done
}