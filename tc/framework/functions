#!/usr/bin/env bash

__draw_line() {
  __count=$2
  __symbol_count=${__count:=80}
  echo $( for i in $(seq 1 1 $__symbol_count) ; do printf "$1"; done )
}

__show_date_hostname() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] on $(hostname)"
}

function _message_info() {
  echo "= INFO ========================================================================="
  __show_date_hostname
  __draw_line -
  printf "$1\n"
  __draw_line -
}

function _message_warning() {
  __exit_code_number=$?
  [[ $__exit_code_number -eq "0" ]] && __exit_code_number=$_error_code
  unset _error_code
  echo "= WARNING ======================================================================"
  __show_date_hostname
  __draw_line -
  echo "Exit code $__exit_code_number"
  printf "$1\n"
  __draw_line -
}

function _message_error() {
  __exit_code_number=$?
  [[ $__exit_code_number -eq "0" ]] && __exit_code_number=$_error_code
  unset _error_code
  echo "= ERROR ========================================================================"
  __show_date_hostname
  __draw_line -
  echo "Exit code $__exit_code_number"
  printf "$1\n"
  __draw_line -
  exit $__exit_code_number
}

function _get_project_path() {
  PROJECT_PATH=$(pwd)
  echo "$PROJECT_PATH"
}

function _get_project_name() {
  PROJECT_NAME=$(echo ${PWD##*/} | sed 's/\./-/g' )
  echo "$PROJECT_NAME"
}

function _get_os() {
  OS=$(uname -s)
  echo $OS
}

function get_ecr_images_count() {
  __output=$( aws ecr describe-images --repository-name ${REPOSITORY} \
          --profile ${PROFILE} --output text \
          | awk {'print $3'} | grep -v ^$ | sort |wc -l )
  export _error_code=$?
  __MSG="Command: \033[36mtcctl aws ecr describe-images\033[39m\n"
  __MSG+="$__output"
  if [[ $_error_code -eq "0" ]]; then
    export ImageCount=`aws ecr describe-images --repository-name ${REPOSITORY} \
            --profile ${PROFILE} --output text \
            | awk {'print $3'} | grep -v ^$ | sort |wc -l`
    echo "Total Image = $ImageCount"
    echo -n "To be delete = "
    echo $(( $ImageCount - $LEAVE_LAST_IMAGE ))
    if [ $(( $ImageCount - $LEAVE_LAST_IMAGE )) \< 1 ] ; then
      echo "No action require"
      exit 0
    fi
  else
    _message_error "$__MSG"
  fi
}

function parse_ecr_image_count() {
  __output=$( aws ecr describe-images --repository-name ${REPOSITORY} \
          --profile ${PROFILE} --output text \
          | awk {'print $3'} | grep -v ^$ | sort | head -n $(( $ImageCount - $LEAVE_LAST_IMAGE )) > /tmp/oldImageTimeStamp.txt )
  export _error_code=$?
  __MSG="Command: \033[36mtcctl aws ecr describe-images\033[39m\n"
  __MSG+="$__output"
  if [[ $_error_code -eq "0" ]]; then
    aws ecr describe-images --repository-name ${REPOSITORY} \
          --profile ${PROFILE} --output text \
          | awk {'print $3'} | grep -v ^$ | sort | head -n $(( $ImageCount - $LEAVE_LAST_IMAGE )) \
          > /tmp/oldImageTimeStamp.txt
  else
    _message_error "$__MSG"
  fi
}
