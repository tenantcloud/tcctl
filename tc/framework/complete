#!/usr/bin/env bash

# kernel returns the kernel type of the system
kernel() {
    uname -s
}

# _readlink wraps readlink in Linux or greadlink in Mac OS. We beed to define
# this here since this script will be called directly by bash-autocomplete.
_readlink() {
    if [ $(kernel) == "Linux" ]; then
        readlink "$@"
        return $?
    elif [ $(kernel) == "Darwin" ]; then
        greadlink "$@"
        return $?
    fi

    echo "Invalid kernel name $(kernel)" && return 1
}

function _bash_cli_tcctl() {
    local root_dir;
    local project_name=tc;
    root_dir=`dirname "$(_readlink -f "$(which ${COMP_WORDS[0]})")"`
    root_dir="$root_dir/$project_name"

    # If the project directory is not found, then the command might be called as
    # a global command
    if [[ ! -d "$root_dir" ]]; then
        root_dir="$HOME/.bcl/cli/$project_name"
    fi

    local curr_arg;
    curr_arg="${COMP_WORDS[COMP_CWORD]}"
    prev_arg="${COMP_WORDS[COMP_CWORD-1]}"

    # Locate the correct command to execute by looking through the app directory
    # for folders and files which match the arguments provided on the command line.
    local cmd_file="$root_dir/app/"
    local cmd_arg_start=1

    # If current or previous argument is "help", don't suggest anyting
    if [[ "$curr_arg" == "help" || "$prev_arg" == "help" ]]; then
        COMPREPLY=()
        return
    fi

    while [[ -d "$cmd_file" && $cmd_arg_start -le $COMP_CWORD ]]; do
        cmd_file="$cmd_file/${COMP_WORDS[cmd_arg_start]}"
        cmd_arg_start=$(($cmd_arg_start+1))
    done

    # If we've found something which doesn't exist, then let's
    # look at its containing directory for info.
    if [[ ! -e "$cmd_file" ]]; then
        cmd_file=`dirname $cmd_file`
    fi

    # If we found a command, then suggest the `--help` argument
    # TODO: Add parsing of .usage files for this
    if [[ -f "$cmd_file" ]]; then
        # Check if we've already got a `--help`, don't output anything
        # if we do.
        for i in `seq $cmd_arg_start $COMP_CWORD`; do
            if [[ "${COMP_WORDS[$i]}" == "--help" ]]; then
                COMPREPLY=()
                return
            fi
        done

        COMPREPLY=(`compgen -W '--help' -- "$curr_arg"`)
    # If we found a directory, then show all the commands which are
    # available within it, as well as the `help` virtual command.
    elif [ -d "$cmd_file" ]; then
        local opts=("help")
        local file_list=(`find $cmd_file/ -maxdepth 1 ! -path $cmd_file/ ! -iname '*.*' -print`)

        for file in "${file_list[@]}"; do
            opts=("${opts[@]}" `basename $file`)
        done

        IFS="
        "
        COMPREPLY=(`compgen -W "$(printf '%s\n' "${opts[@]}")" -- "$curr_arg"`)
    fi
}
